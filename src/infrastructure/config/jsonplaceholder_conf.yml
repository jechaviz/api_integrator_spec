api_integrator: 0.0.1
info:
  title: JSONPlaceholder Users API Integration
  version: 1.0.0
  description: Configuration for integrating with JSONPlaceholder Users API
  contact:
    name: Developer
    url: https://jsonplaceholder.typicode.com
    email: support@example.com
  lang: python
supplier_servers:
  - id: prod
    url: https://jsonplaceholder.typicode.com
    description: JSONPlaceholder production server
tags:
  - name: users
    description: Endpoints to manage users
actions:
  get_all_users:
    tags:
      - users
    description: Get all users
    performs:
      - perform:
          action: http.get
          data:
            path: '{{supplier_server.url}}/users'
        responses:
          - is_success:
              code: 200
            performs:
              - perform:
                  action: log.info
                  data: 'Successfully retrieved all users'
              - perform:
                  a: log.info
                  data: 'Response: {{response.body}}'
              - perform:
                  action: vars.set
                  data:
                    all_users: '{{response.body}}'
          - is_error:
              code: 400
            performs:
              - perform:
                  action: log.error
                  data: 'Error retrieving users: {{response.body}}'
          - is_error:
              code: 400
            performs:
              - perform:
                  a: log.error
                  data: 'Error retrieving users: {{response.body}}'
  get_user_by_id:
    tags:
      - users
    description: Get a user by ID
    performs:
      - perform:
          a: http.get
          data:
            path: '{{supplier_server.url}}/users/{{user_id}}'
        responses:
          - is_success:
              code: 200
            performs:
              - perform:
                  a: log.info
                  data: 'Successfully retrieved user with ID {{user_id}}'
              - perform:
                  a: vars.set
                  data:
                    user: '{{response.body}}'
                data:
                  current_user: '{{response.body}}'
          - is_error:
              code: 404
            performs:
              - perform:
                  a: log.error
                  data: 'User with ID {{user_id}} not found'
  create_user:
    tags:
      - users
    description: Create a new user
    performs:
      - perform:
          a: http.post
          data:
            path: '{{supplier_server.url}}/users'
            body:
              name: '{{new_user_name}}'
              username: '{{new_user_username}}'
              email: '{{new_user_email}}'
        responses:
          - is_success:
              code: 201
            performs:
              - perform:
                  a: log.info
                  data: 'Successfully created new user'
              - perform:
                  a: vars.set
                  data:
                    created_user: '{{response.body}}'
          - is_error:
              code: 400
            performs:
              - perform:
                  a: log.error
                  data: 'Error creating user: {{response.body}}'

vars:
  supplier_server:
    id: prod
  user_id: 1
  new_user_name: John Doe
  new_user_username: johndoe
  new_user_email: john@example.com

constants:
  retry_trials: 3

my_app_server: http://localhost:8000
